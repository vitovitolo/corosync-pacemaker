#!/bin/sh
#
#
# redis
#
# Description:        Manages redis as Linux-HA resource
#
# Authors:        Alan Robertson,
#                Jakub Janczak,
#                Andrew Beekhof,
#                Sebastian Reitenbach,
#                Narayan Newton,
#                Marian Marinov,
#                Florian Haas: MySQL script
#                Martin Walter: rewrite as redis
#
# Support:        linux-ha@lists.linux-ha.org
# License:        GNU General Public License (GPL)
#
# (c) 2002-2005 International Business Machines, Inc.
# 2005-2010 Linux-HA contributors
#
# An example usage in /etc/ha.d/haresources:
# node1 10.0.0.170 redis
#
# See usage() function below for more details...
#
# OCF instance parameters:
# OCF_RESKEY_binary
# OCF_RESKEY_client_binary
# OCF_RESKEY_config
# OCF_RESKEY_user
# OCF_RESKEY_group
# OCF_RESKEY_log
# OCF_RESKEY_pid
#######################################################################
# Initialization:
: ${OCF_FUNCTIONS_DIR=${OCF_ROOT}/lib/heartbeat}
. ${OCF_FUNCTIONS_DIR}/ocf-shellfuncs

#######################################################################

# Fill in some defaults if no values are specified
OCF_RESKEY_binary_default=/usr/bin/redis-server
OCF_RESKEY_client_binary_default=/usr/bin/redis-cli
OCF_RESKEY_config_default=/etc/redis/redis.conf
OCF_RESKEY_user_default=redis
OCF_RESKEY_group_default=redis
OCF_RESKEY_log_default=/var/log/redis/redis-server.log
OCF_RESKEY_pid_default=/var/run/redis/redis-server.pid
OCF_RESKEY_PID_DIR=/var/run/redis

: ${OCF_RESKEY_binary=${OCF_RESKEY_binary_default}}
REDIS_BINDIR=`dirname ${OCF_RESKEY_binary}`
REDIS_SERVER_NAME=`basename ${OCF_RESKEY_binary}`

: ${OCF_RESKEY_client_binary=${OCF_RESKEY_client_binary_default}}
: ${OCF_RESKEY_config=${OCF_RESKEY_config_default}}
: ${OCF_RESKEY_user=${OCF_RESKEY_user_default}}
: ${OCF_RESKEY_group=${OCF_RESKEY_group_default}}
: ${OCF_RESKEY_log=${OCF_RESKEY_log_default}}
: ${OCF_RESKEY_pid=${OCF_RESKEY_pid_default}}

#######################################################################

usage() {
        cat <<UEND
        usage: $0 (start|stop|validate-all|meta-data|monitor)

        $0 manages redis as an HA resource.

        The 'start' operation starts redis.
        The 'stop' operation stops redis.
        The 'status' operation reports whether redis is running
        The 'monitor' operation reports whether redis seems to be working
        The 'validate-all' operation reports whether the parameters are valid

UEND
}

meta_data() {
        cat <<EOF
<?xml version="1.0"?>
<!DOCTYPE resource-agent SYSTEM "ra-api-1.dtd">
<resource-agent name="redis">
<version>1.0</version>

<longdesc lang="en">
Resource script for redis.
It manages a redis instance as an HA resource.
</longdesc>
<shortdesc lang="en">Manages a redis instance</shortdesc>

<parameters>

<parameter name="binary" unique="0" required="0">
<longdesc lang="en">
Location of the redis binary
</longdesc>
<shortdesc lang="en">redis binary</shortdesc>
<content type="string" default="${OCF_RESKEY_binary_default}" />
</parameter>

<parameter name="client_binary" unique="0" required="0">
<longdesc lang="en">
Location of the redis client binary
</longdesc>
<shortdesc lang="en">redis client binary</shortdesc>
<content type="string" default="${OCF_RESKEY_client_binary_default}" />
</parameter>

<parameter name="config" unique="0" required="0">
<longdesc lang="en">
Configuration file
</longdesc>
<shortdesc lang="en">redis config</shortdesc>
<content type="string" default="${OCF_RESKEY_config_default}" />
</parameter>

<parameter name="user" unique="0" required="0">
<longdesc lang="en">
User running redis
</longdesc>
<shortdesc lang="en">redis user</shortdesc>
<content type="string" default="${OCF_RESKEY_user_default}" />
</parameter>

<parameter name="group" unique="0" required="0">
<longdesc lang="en">
Group running redis (for logfile and directory permissions)
</longdesc>
<shortdesc lang="en">redis group</shortdesc>
<content type="string" default="${OCF_RESKEY_group_default}"/>
</parameter>

<parameter name="log" unique="0" required="0">
<longdesc lang="en">
The logfile to be used for redis-server.
</longdesc>
<shortdesc lang="en">$REDIS_SERVER_NAME log file</shortdesc>
<content type="string" default="${OCF_RESKEY_log_default}"/>
</parameter>

<parameter name="pid" unique="0" required="0">
<longdesc lang="en">
The pidfile to be used for redis-server.
</longdesc>
<shortdesc lang="en">$REDIS_SERVER_NAME pid file</shortdesc>
<content type="string" default="${OCF_RESKEY_pid_default}"/>
</parameter>


</parameters>

<actions>
<action name="start" timeout="120" />
<action name="stop" timeout="120" />
<action name="status" timeout="60" />
<action name="monitor" depth="0" timeout="30" interval="20" />
<action name="validate-all" timeout="5" />
<action name="meta-data" timeout="5" />
</actions>
</resource-agent>
EOF
}

redis_start() {
        ocf_log info "REDIS START"
        local rc

        redis_status
        rc=$?

		if [ $rc -eq $OCF_SUCCESS ]; then
                ocf_log info "$REDIS_SERVER_NAME is already running"
                return $rc
        fi


        if [ -d $OCF_RESKEY_PID_DIR ]; then
                ocf_log info "$OCF_RESKEY_PID_DIR directory exits"
        else
                ocf_log info "Creating directory: $OCF_RESKEY_PID_DIR"
                mkdir $OCF_RESKEY_PID_DIR
                chown $OCF_RESKEY_user:$OCF_RESKEY_group $OCF_RESKEY_PID_DIR
        fi


        touch $OCF_RESKEY_log
        chown $OCF_RESKEY_user:$OCF_RESKEY_group $OCF_RESKEY_log
        chmod 0640 $OCF_RESKEY_log

        touch $OCF_RESKEY_pid
        chown $OCF_RESKEY_user:$OCF_RESKEY_group $OCF_RESKEY_pid

        start-stop-daemon --start --quiet --umask 007 --pidfile $OCF_RESKEY_pid --make-pidfile --chuid $OCF_RESKEY_user:$OCF_RESKEY_group --exec $OCF_RESKEY_binary -- $OCF_RESKEY_config
        rc=$?

        if [ $rc -ne 0 ]; then
                ocf_log err "$OCF_RESKEY_binary start command failed: $rc"
                return $OCF_NOT_RUNNING
        fi

        ocf_log info "$REDIS_SERVER_NAME started"
        return $OCF_SUCCESS
}

redis_status() {
        ocf_log info "REDIS STATUS"
        local rc

        /usr/bin/redis-cli --raw -h 127.0.0.1 ping

        rc=$?

        if [ $rc -ne 0 ]; then
                remove_pid
                #return $rc
                return $OCF_NOT_RUNNING
        fi



        return $OCF_SUCCESS
}



remove_pid() {
        ocf_log info "REMOVE PID"
        ocf_log debug "Removing PID file $OCF_RESKEY_pid"
        rm -f $OCF_RESKEY_pid
}

redis_stop() {
        ocf_log info "REDIS STOP"
        local rc

        redis_status
        rc=$?

        if [ $rc -ne $OCF_SUCCESS ]; then
                ocf_log info "$REDIS_SERVER_NAME is not running";
                return $OCF_SUCCESS
        fi

        start-stop-daemon --stop --retry 10 --quiet --oknodo --pidfile $OCF_RESKEY_pid --exec $OCF_RESKEY_binary
        rc=$?

        if [ $rc -ne 0 ]; then
                ocf_log err "$OCF_RESKEY_binary stop command failed: $rc"
                return $OCF_ERR_GENERIC
        fi

        ocf_log info "$REDIS_SERVER_NAME stopped";
        remove_pid
        return $OCF_SUCCESS
}

#######################################################################

# Functions invoked by resource manager actions

redis_validate() {
        ocf_log info "REDIS VALIDATE"
        check_binary $OCF_RESKEY_binary
        check_binary $OCF_RESKEY_client_binary

        if [ ! -f $OCF_RESKEY_config ]; then
                ocf_log err "Config $OCF_RESKEY_config doesn't exist";
                return $OCF_ERR_CONFIGURED;
        fi

        getent passwd $OCF_RESKEY_user >/dev/null 2>&1
        if [ $? -ne 0 ]; then
                ocf_log err "User $OCF_RESKEY_user doesn't exit";
                return $OCF_ERR_INSTALLED;
        fi

        getent group $OCF_RESKEY_group >/dev/null 2>&1
        if [ $? -ne 0 ]; then
                ocf_log err "Group $OCF_RESKEY_group doesn't exist";
                return $OCF_ERR_INSTALLED;
        fi

        true
}



#######################################################################

case "$1" in
        meta-data)        meta_data
                exit $OCF_SUCCESS;;
        usage|help)        usage
                exit $OCF_SUCCESS;;
esac
redis_validate
rc=$?
LSB_STATUS_STOPPED=3
if [ $rc -ne 0 ]; then
        ocf_log info "RESOURCE: $1"
        case "$1" in
                stop) exit $OCF_SUCCESS;;
                monitor) exit $OCF_NOT_RUNNING;;
                status) exit $LSB_STATUS_STOPPED;;
                *) exit $rc;;
esac
fi

# What kind of method was invoked?
case "$1" in
        start)        redis_start;;
        stop)                redis_stop;;
        status)        redis_status;;
        monitor)        redis_status;;
        validate-all)        exit $OCF_SUCCESS;;

        *)                usage
                exit $OCF_ERR_UNIMPLEMENTED;;
esac
